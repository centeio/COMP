/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  //static = true;
  multi = true;
}

PARSER_BEGIN(MyNewGrammar)
package pack;
import java.io.*;
import java.util.HashMap;


public class MyNewGrammar
{
  public static PrintWriter writer;
  public static ASTStart n;
  private static HashMap<String,String> vars;
  private static int i = 0;
  
  
  public static void createjjt(String code)
  {
 

    StringReader sr = new StringReader(code);
    Reader r = new BufferedReader(sr);
    try
    {
   		MyNewGrammar grammar = new MyNewGrammar(r);
	    writer = new PrintWriter("MyPattern.java", "UTF-8");
	    vars = new HashMap<String,String>();
      n = grammar.Start(); //root
	  writer.close();
      
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* Keywords */
{
	< ABSTRACT: "abstract" > |
	< CONTINUE: "continue" > |
	< NEW: "new" > |
	< SWITCH: "switch" > |
	< ASSERT: "assert" > |
	< DEFAULTT: "default" > |
	< GOTO: "goto" > |
	< PACKAGE: "package" > |
	< SYNCHRONIZED: "synchronized" > |
	< BOOLEAN: "boolean" > |
	< PRIVATE: "private" > |
	< THIS: "this" > |
	< BREAK: "break" > |
	< DOUBLE: "double" > |
	< IMPLEMENTS: "implements" > |
	< PROTECTED: "protected" > |
	< THROW: "throw" > |
	< BYTE: "byte" > |
	< IMPORT: "import" > |
	< THROWS: "throws" > |
	< CASE: "case" > |
	< ENUM: "enum" > |
	< INSTANCEOF: "instanceof" > |
	< TRANSIENT: "transient" > |
	< CATCH: "catch" > |
	< EXTENDS: "extends" > |
	< SHORT: "short" > |
	< TRY: "try" > |
	< IF: "if"> |
  	< ELSE: "else" > |
  	< WHILE: "while" > |
  	< DO: "do" > |
  	< FOR: "for" > |
  	< INT: "int" > |
  	< CLASS: "class" > |
  	< PUBLIC: "public" > |
  	< RETURN: "return" > |
  	< CHAR: "char" > |
  	< FINAL: "final" > |
  	< INTERFACE: "interface" > |
  	< STATIC: "static" > |
  	< VOID: "void" > |
  	< FINALLY: "finally" > |
  	< LONG: "long" > |
  	< STRICTFP: "strictfp" > |
  	< VOLATILE: "volatile" > |
  	< CONST: "const" > |
  	< FLOAT: "float" > |
  	< NATIVE: "native" > |
  	< BOOLEANVALUE: "false" | "true"  > |
  	< SUPER: "super" > |
  	< PATTERN: "Pattern" > |
  	< EXHAUSTIVE: "Exhaustive" > |
  	< PARTIAL: "Partial" > |
  	< IGNORE: "ignore"> |
  	< STRINGTYPE: "string"> 
}

TOKEN : /* IDENTIFIERS */
{
  	< VAR : "@"< STRING > > |
  	< STRING: < LETTER > (< LETTER > | < INTEGER >)* > |
	< LETTER : [ "_", "a"-"z", "A"-"Z" ] > |
	< INTEGER : [ "0"-"9" ]([ "0"-"9" ])* > |
	< EQUALS: "==" > |
	< PL: "(" > |
	< PR: ")" > |
	< BL: "{" > |
	< BR: "}" > |
	< BRL: "[" > |
	< BRR: "]" > |
	< EQ : "="> |
	< MINUS : "-"> |
	< MMINUS : "--"> |
	< PPLUS : "++"> |
	< PLUS : "+"> |	
	< TIMES : "*" > |
	< DIV : "/" > |
	< GREATER : ">" > |
	< MINOR : "<" > |
	< SEMICOL : ";" >
		
}

ASTStart Start() :
{}
{ /*Reads every pattern and writes it in Java*/
  { writer.println("public class MyPattern{"); }
  	(< PATTERN >  { writer.print("void "); }
  	 { System.out.println("Novo pattern"); } Temp() { writer.print("("); } [Search()] { writer.println("){"); } (Pattern())+ { writer.println("}"); } )+

  { writer.println(" }"); }
  	
  	{ return jjtThis; }
}

/*Calling a function*/
void Call() : {} {
  	< PL > { writer.print("(");} [Expression()] < PR > { writer.print(")");}
}

/*Possible patterns*/
void Pattern() : {} {
  { System.out.println("Nova subarvore"); }  
  (    If() | While() | DoWhile() | For() | Ignore() | Operation())
}

/*Defines the type of search: exhaustive or partial*/
void Search() : {Token t;} {
  	t = < EXHAUSTIVE >
  	{
		jjtThis.value = t.image;
		writer.print("String " + t.image);
	}|
	t =  < PARTIAL >
	{
		jjtThis.value = t.image;
		writer.print("String " + t.image);
	}	
}

/*Finds an "ignore" in the code*/
void Ignore() : { } {
	< IGNORE > { writer.println("ignore();"); System.out.println("Ignore");} 
}

/*Starts a pattern if*/
void If() :  {} {
  { writer.print("if"); System.out.println("If");  }
  
	< IF > Condition() Block()	[< ELSE > { writer.print("else"); System.out.println("Else");} Block()]
}

/*Starts a pattern While*/
void While() :  {} {
  { writer.print("while"); System.out.println("While");  }
  
	< WHILE > Condition() Block() 
}

/*Starts a pattern DoWhile*/
void DoWhile() :  {} {
  { writer.print("do"); System.out.println("Do");  }
  
	< DO > Block() < WHILE > { writer.print("while"); System.out.println("While");}  Condition() < SEMICOL > { writer.print(";");}
}

/*Starts a pattern For*/
void For() :  {} {
  { writer.print("for"); System.out.println("For");  }
  
	< FOR > ForCondition() Block() 
}

/*Checks the Condition of the for*/
void ForCondition() : { } {
 < PL > { writer.print("("); } [Parcel() [Assignment()] | Definition() ]
 < SEMICOL > { writer.print(";");}
 [(Expression() [CompareOp() Expression()] | < BOOLEANVALUE > )]
 < SEMICOL > { writer.print(";");} [OperationAux()] < PR >  { writer.print(")"); }  
}

/*Analyses the code in between brackets*/
void Block() : { } {
	< BL > { writer.println("{"); } (Operation()|Ignore())+ < BR >  { writer.print("}"); } | Operation()
 }

/*Checks the Condition of an if, while or dowhile*/
void Condition() : {} {
  { System.out.println("Condition");  }
  
	< PL > { writer.print("("); } (Expression() [CompareOp() Expression()] | Bool() ) < PR >  { writer.print(")"); } 
}

/*Gets true or false*/
void Bool() : {Token t;} {
  t = < BOOLEANVALUE >
  {
		jjtThis.value = t.image;
		writer.print(t.image);
  }
  
}

/*Checks a comparison operation*/
void CompareOp() : {Token t;} {
  { System.out.println("CompareOp");  }
	t = < EQUALS >
	{
		jjtThis.value = t.image;
		writer.print(t.image);
	} |

	t = < GREATER >
	{
		jjtThis.value = t.image;
		writer.print(t.image);
	} |
	t = < MINOR >
	{
		jjtThis.value = t.image;
		writer.print(t.image);
	}
}


/*Gets a var like @x, and checks if it was already parsed*/
void Var() : {Token t;} {
  { System.out.println("Var");  }
  
	t = < VAR >
	{
		jjtThis.value = t.image;
		String name;
		/*Checks if the variable exists in the hashtable (has already been parsed). If not: creates it with an incremental number*/
		if((name = vars.get(t.image)) == null) {
		  	name = "a"+i++;
		  	vars.put(t.image,name);
		}
		System.out.println("Var");
		writer.print(name);
		
	}
}

/*An expression in between curly brackets or an Int or Pacerl : anything that can be used in an operation*/
void Expression() : {} {
  { System.out.println("Expression");  }  
	< PL > { writer.print("("); } Expression() Op() Expression() < PR >  { writer.print(")"); } | Parcel() | Int() 
	
}

/*A Parcel is a variable (Temp()). This can also mean it is an @x or a position of an array*/
void Parcel() : {Token t;} {
	(Var() | Temp()) [Array()]  
}

/*Defines as a position of an array if it ends with square brackets and has something in between them*/
void Array() : { } {
  < BRL > { writer.print("[");} Expression() [AritmeticOp()] < BRR > { writer.print("]");}
}

/*Defines as a declaration of an array if it ends with square brackets*/
void ArrayDeclaration() : { } {
  < BRL > { writer.print("[");} [Expression() [AritmeticOp()]] < BRR > { writer.print("]");}
}

/*A declaration/assignment*/
void Definition() : {} {
  { System.out.println("Definition");  }
	(Type() (Var()|Temp()) [ArrayDeclaration()] [Assignment()] )
}

/*Indicates the type of a variable*/
void Type() : {Token t;} {
	t = < BYTE >
	{
		jjtThis.value = t.image;
		writer.print(t.image + " ");
	}|
	t = < SHORT >
	{
		jjtThis.value = t.image;
		writer.print(t.image + " ");
	}|
	t = < INT >
	{
		jjtThis.value = t.image;
		writer.print(t.image + " ");
	}|
	t = < LONG >
	{
		jjtThis.value = t.image;
		writer.print(t.image + " ");
	}|
	t = < FLOAT >
	{
		jjtThis.value = t.image;
		writer.print(t.image + " ");
	}|
	t = < DOUBLE >
	{
		jjtThis.value = t.image;
		writer.print(t.image + " ");
	}|
	t = < CHAR >
	{
		jjtThis.value = t.image;
		writer.print(t.image + " ");
	}|
	t = < STRINGTYPE >
	{
		jjtThis.value = t.image;
		writer.print(t.image + " ");
	}
}

/*Single or group of digits*/
void Int() : {Token t;} {
  { System.out.println("Int");  }
  
    t = < INTEGER >
	{
		jjtThis.value = t.image;
		writer.print(t.image);
	}
}

/*A string that means it is a variable*/
void Temp() : {Token t;} {
  { System.out.println("String");  }
  
    t = < STRING >
	{
		jjtThis.value = t.image;
		writer.print(t.image);
	}
}

/*This can be a definition of a variable or an operation*/
void Operation() : {} {
  { System.out.println("Operation");  }
	 (OperationAux()|Definition()) < SEMICOL > { writer.println(";"); }
}

/*This involves a Parcel and an assignment or function call or an Aritmetic operation*/
void OperationAux() : {} {
  { System.out.println("Operation");  }
	(Parcel() (Assignment() | Call() | AritmeticOp()))
}

/*Parses an assignment*/
void Assignment() : {} {
	{ System.out.println("Assignment");  }
	< EQ > { writer.print(" = "); } (Expression() [AritmeticOp() {System.out.println("AritmeticOp");}]  |   < NEW > { writer.print("new "); }  Type() ArrayDeclaration())
}

/*Accepts an operator and a right side of the expression*/
void AritmeticOp() : {} { 
  { System.out.println("AritmeticOp");  }
  
	Op() Expression() | Inc() | Dec()
}

/*Operation ++*/
void Inc() : {Token t;} {
  { System.out.println("++");  }
  
	t = < PPLUS > {jjtThis.value = t.image; writer.print(t.image); } 
}

/*Operation --*/
void Dec() : {Token t;} {
  { System.out.println("--");  }
  
	t = < MMINUS > {jjtThis.value = t.image; writer.print(t.image); } 
}

/*Other operators*/
void Op() : {Token t;} {
  { System.out.println("Op");  }
  
	t = < MINUS > {jjtThis.value = t.image; writer.print(t.image); } |
	t = < PLUS > {jjtThis.value = t.image; writer.print(t.image); }|
	t = < TIMES > {jjtThis.value = t.image; writer.print(t.image); }|
	t = < DIV > {jjtThis.value = t.image; writer.print(t.image); }

}
