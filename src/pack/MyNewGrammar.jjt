/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  //static = true;
  multi = true;
}

PARSER_BEGIN(MyNewGrammar)
package pack;
import java.io.*;
import java.util.HashMap;


public class MyNewGrammar
{
  public static PrintWriter writer;
  public static ASTStart n;
  private static HashMap<String,String> vars;
  private static int i = 0;
  
  
  public static void createjjt(String code)
  {
 

    StringReader sr = new StringReader(code);
    Reader r = new BufferedReader(sr);
    try
    {
   		MyNewGrammar grammar = new MyNewGrammar(r);
	    writer = new PrintWriter("MyPattern.java", "UTF-8");
	    vars = new HashMap<String,String>();
      n = grammar.Start(); //root
	  writer.close();
      
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* Keywords */
{
	< ABSTRACT: "abstract" > |
	< CONTINUE: "continue" > |
	< NEW: "new" > |
	< SWITCH: "switch" > |
	< ASSERT: "assert" > |
	< DEFAULTT: "default" > |
	< GOTO: "goto" > |
	< PACKAGE: "package" > |
	< SYNCHRONIZED: "synchronized" > |
	< BOOLEAN: "boolean" > |
	< PRIVATE: "private" > |
	< THIS: "this" > |
	< BREAK: "break" > |
	< DOUBLE: "double" > |
	< IMPLEMENTS: "implements" > |
	< PROTECTED: "protected" > |
	< THROW: "throw" > |
	< BYTE: "byte" > |
	< IMPORT: "import" > |
	< THROWS: "throws" > |
	< CASE: "case" > |
	< ENUM: "enum" > |
	< INSTANCEOF: "instanceof" > |
	< TRANSIENT: "transient" > |
	< CATCH: "catch" > |
	< EXTENDS: "extends" > |
	< SHORT: "short" > |
	< TRY: "try" > |
	< IF: "if"> |
  	< ELSE: "else" > |
  	< WHILE: "while" > |
  	< DO: "do" > |
  	< FOR: "for" > |
  	< INT: "int" > |
  	< CLASS: "class" > |
  	< PUBLIC: "public" > |
  	< RETURN: "return" > |
  	< CHAR: "char" > |
  	< FINAL: "final" > |
  	< INTERFACE: "interface" > |
  	< STATIC: "static" > |
  	< VOID: "void" > |
  	< FINALLY: "finally" > |
  	< LONG: "long" > |
  	< STRICTFP: "strictfp" > |
  	< VOLATILE: "volatile" > |
  	< CONST: "const" > |
  	< FLOAT: "float" > |
  	< NATIVE: "native" > |
  	< BOOLEANVALUE: "false" | "true"  > |
  	< SUPER: "super" > |
  	< PATTERN: "Pattern" > |
  	< EXHAUSTIVE: "Exhaustive" > |
  	< PARTIAL: "Partial" >
}

TOKEN : /* IDENTIFIERS */
{
  	< VAR : "@"< STRING > > |
  	< STRING: < LETTER > (< LETTER > | < INTEGER >)* > |
	< LETTER : [ "_", "a"-"z", "A"-"Z" ] > |
	< INTEGER : [ "0"-"9" ]([ "0"-"9" ])* > |
	< EQUALS: "==" > |
	< PL: "(" > |
	< PR: ")" > |
	< BL: "{" > |
	< BR: "}" > |
	< EQ : "="> |
	< MINUS : "-"> |
	< PLUS : "+"> |
	< TIMES : "*" > |
	< DIV : "/" > |
	< MAJOR : ">" > |
	< MINOR : "<" > |
	< SEMICOL : ";" >
		
}

ASTStart Start() :
{}
{
  { writer.println("public class MyPattern{"); }
  	(< PATTERN >  { writer.print("void "); }
  	 Name() [Search()] { writer.println("{"); } Pattern() { writer.println("}"); })+

  { writer.println(" }"); }
  	
  	{ return jjtThis; }
}

void Name() : {Token t;} {
  	t = < STRING >
  	{
		jjtThis.value = t.image;
		writer.print(t.image+"()");		
	}
}

void Pattern() : {} {
  
  If() | Operation() 
}

void Search() : {Token t;} {
  	t = < EXHAUSTIVE >   	|
	t =  < PARTIAL >	
}

void If() :  {} {
  { writer.print("if("); System.out.println("If");  }
  
	< IF > <PL >

	Condition() < PR >  { writer.print(")"); } < BL > { writer.println("{"); } Operation() < BR >  { writer.print("}"); }
	[<ELSE > { writer.print("else"); } < BL > { writer.println("{"); } Operation() < BR >  { writer.print("}"); }]
}

void Condition() : {} {
  { System.out.println("Condition");  }
  
	Expression()  CompareOp() Expression() 
}

void CompareOp() : {Token t;} {
  { System.out.println("CompareOp");  }
	t = < EQUALS >
	{
		jjtThis.value = t.image;
		writer.print(t.image);
	}
}

void Var() : {Token t;} {
  { System.out.println("Var");  }
  
	t = < VAR >
	{
		jjtThis.value = t.image;
		String name;
		if((name = vars.get(t.image)) == null) {
		  	name = "a"+i++;
		  	vars.put(t.image,name);
		}
		System.out.println("Var");
		writer.print(name);
		
	}
}

void Expression() : {} {
  { System.out.println("Expression");  }
  
	< PL > { writer.print("("); } Expression() Op() Expression() < PR >  { writer.print(")"); } |
	Var() |
	Int() |
	String()
	
}

void Int() : {Token t;} {
  { System.out.println("Int");  }
  
    t = < INTEGER >
	{
		jjtThis.value = t.image;
		writer.print(t.image);
	}
}

void String() : {Token t;} {
  { System.out.println("String");  }
  
    t = < STRING >
	{
		jjtThis.value = t.image;
		writer.print(t.image);
	}
}

void Operation() : {} {
  { System.out.println("Operation");  }
	Expression() [AritmeticOp() | Assignment()]
}

void Assignment() : {} {
	{ System.out.println("Assignment");  }
	< EQ > { writer.print(" = "); } Expression() [{ System.out.println("AritmeticOp");  } AritmeticOp()] < SEMICOL > { writer.println(";"); }
}

void AritmeticOp() : {} { 
  { System.out.println("AritmeticOp");  }
  
	Op() Expression()
}

void Op() : {Token t;} {
  { System.out.println("Op");  }
  
	t = < MINUS > {jjtThis.value = t.image; writer.print(t.image); } |
	t = < PLUS > {jjtThis.value = t.image; writer.print(t.image); }|
	t = < TIMES > {jjtThis.value = t.image; writer.print(t.image); }|
	t = < DIV > {jjtThis.value = t.image; writer.print(t.image); }

}
